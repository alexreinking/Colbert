    else if(myScanner->getTokens().at(index).getType() == Token::Increment) // IDENTIFIER++; == IDENTIFIER = SAME_IDENTIFIER + 1;
    {
        Token plus, one, equals;
        plus.setConstData("+");
        plus.setType(Token::Addition);
        one.setConstData("1");
        one.setType(Token::Number);
        equals.setConstData("=");
        equals.setType(Token::Assignment);
        myScanner->getMutableTokens()->removeAt(index);
        myScanner->getMutableTokens()->insert(index, one);
        myScanner->getMutableTokens()->insert(index, plus);
        myScanner->getMutableTokens()->insert(index, myScanner->getTokens().at(index-1));
        myScanner->getMutableTokens()->insert(index++, equals);
        static_cast<AssignmentNode*>(n)->setRValue(static_cast<ExpressionNode*>(parseExpression(parent, index)));
        if(myScanner->getTokens().at(index).getType() != Token::Semicolon)
        {
            index++;
            cerr << "Parser: Malformed assignment!" << endl;
            return 0;
        }
        n->setParent(parent);
    }
    else if(myScanner->getTokens().at(index).getType() == Token::Decrement) // IDENTIFIER--; == IDENTIFIER = SAME_IDENTIFIER - 1;
    {
        Token minus, one, equals;
        minus.setConstData("-");
        minus.setType(Token::Subtraction);
        one.setConstData("1");
        one.setType(Token::Number);
        equals.setConstData("=");
        equals.setType(Token::Assignment);
        myScanner->getMutableTokens()->removeAt(index);
        myScanner->getMutableTokens()->insert(index, one);
        myScanner->getMutableTokens()->insert(index, minus);
        myScanner->getMutableTokens()->insert(index, myScanner->getTokens().at(index-1));
        myScanner->getMutableTokens()->insert(index++, equals);
        static_cast<AssignmentNode*>(n)->setRValue(static_cast<ExpressionNode*>(parseExpression(parent, index)));
        if(myScanner->getTokens().at(index).getType() != Token::Semicolon)
        {
            index++;
            cerr << "Parser: Malformed assignment!" << endl;
            return 0;
        }
        n->setParent(parent);
    }
